# Generated by Django 3.0.7 on 2021-02-07 08:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import getch.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('boo_selected', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agelabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('key', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bodylabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('key', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Boo',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nick', models.CharField(blank=True, max_length=100, null=True)),
                ('text', models.TextField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('hidden', models.BooleanField(default=False)),
                ('agelabels', models.ManyToManyField(blank=True, to='getch.Agelabel')),
                ('bodylabels', models.ManyToManyField(blank=True, to='getch.Bodylabel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('text', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('boo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='getch.Boo')),
                ('mention', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentioned_comment_set', to='getch.Boo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genderlabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('key', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Itemlabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('key', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('nvotes_up', models.IntegerField(default=0)),
                ('nvotes_down', models.IntegerField(default=0)),
                ('boo', models.ForeignKey(blank=True, default=97, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='getch.Boo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pix', models.ImageField(blank=True, max_length=500, null=True, upload_to=getch.models._profilepix_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Stylelabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('key', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostQA',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='getch.Post')),
                ('pix', models.ImageField(max_length=500, upload_to=getch.models._postpix_path)),
            ],
            options={
                'abstract': False,
            },
            bases=('getch.post',),
        ),
        migrations.CreateModel(
            name='PostVoteAB',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='getch.Post')),
                ('pix_a', models.ImageField(max_length=500, upload_to=getch.models._postpix_path)),
                ('pix_b', models.ImageField(max_length=500, upload_to=getch.models._postpix_path)),
                ('pixlabel_a', models.TextField(blank=True, max_length=200, null=True)),
                ('pixlabel_b', models.TextField(blank=True, max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('getch.post',),
        ),
        migrations.CreateModel(
            name='PostVoteOX',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='getch.Post')),
                ('keys', models.CharField(choices=[('OX', 'OX'), ('SM', '살말')], default='OX', max_length=2)),
                ('pix', models.ImageField(max_length=500, upload_to=getch.models._postpix_path)),
            ],
            options={
                'abstract': False,
            },
            bases=('getch.post',),
        ),
        migrations.CreateModel(
            name='Postpix',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(default='ox', max_length=5)),
                ('img', models.ImageField(max_length=500, upload_to=getch.models._postpix_path2)),
                ('desc', models.TextField(blank=True, max_length=200, null=True)),
                ('tokens', models.TextField(blank=True, max_length=500, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='getch.Post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=300)),
                ('public', models.BooleanField(default=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Commentpix',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('img', models.ImageField(max_length=500, upload_to=getch.models._commentpix_path)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='getch.Comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='getch.Post'),
        ),
        migrations.AddField(
            model_name='boo',
            name='genderlabels',
            field=models.ManyToManyField(blank=True, to='getch.Genderlabel'),
        ),
        migrations.AddField(
            model_name='boo',
            name='itemlabels',
            field=models.ManyToManyField(blank=True, to='getch.Itemlabel'),
        ),
        migrations.AddField(
            model_name='boo',
            name='profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='getch.Profile'),
        ),
        migrations.AddField(
            model_name='boo',
            name='stylelabels',
            field=models.ManyToManyField(blank=True, to='getch.Stylelabel'),
        ),
        migrations.AddField(
            model_name='boo',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Flager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('status', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Status')),
                ('time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('object_id', models.PositiveIntegerField(db_index=True, verbose_name='Object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='getch_flager_flags', to='contenttypes.ContentType', verbose_name='Content type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flager_users', to='getch.Boo', verbose_name='Boo')),
            ],
            options={
                'verbose_name': 'Flag',
                'verbose_name_plural': 'Flags',
                'abstract': False,
                'unique_together': {('content_type', 'object_id', 'user', 'status')},
            },
        ),
    ]
